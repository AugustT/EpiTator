#!/usr/bin/env python
"""Tests for the TokenAnnotator that annotates a sentence with tokens and their
offsets."""

import sys
import unittest

sys.path = ['./'] + sys.path

from annotator.token_annotator import TokenAnnotator


class TokenAnnotatorTest(unittest.TestCase):

	def setUp(self):
		self.annotator = TokenAnnotator()

	def test_simple_sentence(self):

		text = "Hi Joe."
		sentence = self.annotator.annotate(text=text)

		self.assertEqual(len(sentence.tiers['tokens'].spans), 3)

		self.assertEqual(sentence.tiers['tokens'].spans[0].label, 'Hi')
		self.assertEqual(sentence.tiers['tokens'].spans[0].start, 0)
		self.assertEqual(sentence.tiers['tokens'].spans[0].end, 2)
		
		print "sentence.tiers['tokens'].spans[1].start", sentence.tiers['tokens'].spans[1].start

		self.assertEqual(sentence.tiers['tokens'].spans[1].label, 'Joe')
		self.assertEqual(sentence.tiers['tokens'].spans[1].start, 3)
		self.assertEqual(sentence.tiers['tokens'].spans[1].end, 6)

		self.assertEqual(sentence.tiers['tokens'].spans[2].label, '.')
		self.assertEqual(sentence.tiers['tokens'].spans[2].start, 6)
		self.assertEqual(sentence.tiers['tokens'].spans[2].end, 7)


	def test_initial_space(self):

		text = " Hi."
		sentence = self.annotator.annotate(text=text)

		# This is true for the default wordpunct annotator, but not e.g. the
		# SpaceAnnotator
		self.assertEqual(len(sentence.tiers['tokens'].spans), 2)

		self.assertEqual(sentence.tiers['tokens'].spans[0].label, 'Hi')
		self.assertEqual(sentence.tiers['tokens'].spans[0].start, 1)
		self.assertEqual(sentence.tiers['tokens'].spans[0].end, 3)
		
		self.assertEqual(sentence.tiers['tokens'].spans[1].label, '.')
		self.assertEqual(sentence.tiers['tokens'].spans[1].start, 3)
		self.assertEqual(sentence.tiers['tokens'].spans[1].end, 4)

	def test_multiple_spaces_in_a_row(self):

		text = "         Hi  there      Joe  ."
		sentence = self.annotator.annotate(text=text)

		# This is true for the default wordpunct annotator, but not e.g. the
		# SpaceAnnotator
		self.assertEqual(len(sentence.tiers['tokens'].spans), 4)

		print "sentence.tiers['tokens'].spans[0].text ::: ", sentence.tiers['tokens'].spans[0].text

		self.assertEqual(sentence.tiers['tokens'].spans[0].label, 'Hi')
		self.assertEqual(sentence.tiers['tokens'].spans[0].text, 'Hi')
		self.assertEqual(sentence.tiers['tokens'].spans[0].start, 9)
		self.assertEqual(sentence.tiers['tokens'].spans[0].end, 11)
		
		self.assertEqual(sentence.tiers['tokens'].spans[1].label, 'there')
		self.assertEqual(sentence.tiers['tokens'].spans[1].text, 'there')
		self.assertEqual(sentence.tiers['tokens'].spans[1].start, 13)
		self.assertEqual(sentence.tiers['tokens'].spans[1].end, 18)

		self.assertEqual(sentence.tiers['tokens'].spans[2].label, 'Joe')
		self.assertEqual(sentence.tiers['tokens'].spans[2].text, 'Joe')
		self.assertEqual(sentence.tiers['tokens'].spans[2].start, 24)
		self.assertEqual(sentence.tiers['tokens'].spans[2].end, 27)

		self.assertEqual(sentence.tiers['tokens'].spans[3].label, '.')
		self.assertEqual(sentence.tiers['tokens'].spans[3].text, '.')
		self.assertEqual(sentence.tiers['tokens'].spans[3].start, 29)
		self.assertEqual(sentence.tiers['tokens'].spans[3].end, 30)


if __name__ == '__main__':
	unittest.main()