
# This script was generated by the train.py script in EHA's private eval-scripts
# repository.

import numpy as np
from numpy import array, int32
base_classifier = {'C': 1.0,
 'class_weight': None,
 'classes_': array([False,  True], dtype=bool),
 'coef_': array([[ 0.36945422,  0.00772058, -0.01685772,  0.29789672,  0.49661641,
         1.02399792, -0.00263311, -0.57737336, -0.55397937, -0.28253114,
         0.        ,  0.        ,  0.        ,  0.        ]]),
 'dual': False,
 'fit_intercept': True,
 'intercept_': array([-8.37127102]),
 'intercept_scaling': 1,
 'max_iter': 100,
 'multi_class': 'ovr',
 'n_iter_': 31,
 'penalty': 'l2',
 'random_state': None,
 'solver': 'liblinear',
 'tol': 0.0001,
 'verbose': 0}
HIGH_CONFIDENCE_THRESHOLD = 0.5
contextual_classifier = {'C': 1.0,
 'class_weight': None,
 'classes_': array([False,  True], dtype=bool),
 'coef_': array([[ 0.26324799,  0.01014031, -0.3141562 ,  0.14609665,  0.17965277,
         0.17883378, -0.00197824, -0.66465653, -0.74837896,  0.15867841,
         0.05042013,  0.01074976,  1.4701958 ,  1.34093115]]),
 'dual': False,
 'fit_intercept': True,
 'intercept_': array([-6.77340006]),
 'intercept_scaling': 1,
 'max_iter': 100,
 'multi_class': 'ovr',
 'n_iter_': 42,
 'penalty': 'l2',
 'random_state': None,
 'solver': 'liblinear',
 'tol': 0.0001,
 'verbose': 0}
# Logistic regression code from scipy
def predict_proba(X, classifier):
    """Probability estimation for OvR logistic regression.
    Positive class probabilities are computed as
    1. / (1. + np.exp(-classifier.decision_function(X)));
    multiclass is handled by normalizing that over all classes.
    """
    prob = np.dot(X, classifier['coef_'].T) + classifier['intercept_']
    prob = prob.ravel() if prob.shape[1] == 1 else prob
    prob *= -1
    np.exp(prob, prob)
    prob += 1
    np.reciprocal(prob, prob)
    if prob.ndim == 1:
        return np.vstack([1 - prob, prob]).T
    else:
        # OvR normalization, like LibLinear's predict_probability
        prob /= prob.sum(axis=1).reshape((prob.shape[0], -1))
        return prob
def predict_proba_base(X):
    return predict_proba(X, base_classifier)
def predict_proba_contextual(X):
    return predict_proba(X, contextual_classifier)
