
# This script was generated by the train.py script in EHA's private eval-scripts
# repository.

import numpy as np
from numpy import array, int32
classifier = {'C': 1.0,
 'class_weight': None,
 'classes_': array([False,  True], dtype=bool),
 'coef_': array([[-0.52642077, -0.30970635,  1.09902798, -0.59476067, -0.00259168,
         0.53278785,  0.36725038,  0.28014772,  0.00772882, -0.01897592]]),
 'dual': False,
 'fit_intercept': True,
 'intercept_': array([-8.23952128]),
 'intercept_scaling': 1,
 'max_iter': 100,
 'multi_class': 'ovr',
 'n_iter_': array([38], dtype=int32),
 'n_jobs': 1,
 'penalty': 'l2',
 'random_state': None,
 'solver': 'liblinear',
 'tol': 0.0001,
 'verbose': 0,
 'warm_start': False}
# Logistic regression code from scipy
def predict_proba(X):
    """Probability estimation for OvR logistic regression.
    Positive class probabilities are computed as
    1. / (1. + np.exp(-classifier.decision_function(X)));
    multiclass is handled by normalizing that over all classes.
    """
    prob = np.dot(X, classifier['coef_'].T) + classifier['intercept_']
    prob = prob.ravel() if prob.shape[1] == 1 else prob
    prob *= -1
    np.exp(prob, prob)
    prob += 1
    np.reciprocal(prob, prob)
    if prob.ndim == 1:
        return np.vstack([1 - prob, prob]).T
    else:
        # OvR normalization, like LibLinear's predict_probability
        prob /= prob.sum(axis=1).reshape((prob.shape[0], -1))
        return prob
