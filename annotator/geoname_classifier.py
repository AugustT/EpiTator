
# This script was generated by the train.py script in EHA's private eval-scripts
# repository.

import numpy as np
from numpy import array, int32
base_classifier = {'C': 1.0,
 'class_weight': None,
 'classes_': array([False,  True], dtype=bool),
 'coef_': array([[ 0.36408453,  0.00807526, -0.01984072,  0.28441118,  0.50121908,
         0.99743232, -0.588864  , -0.00294274, -0.5852539 , -0.56553004,
        -0.31402787,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ]]),
 'dual': False,
 'fit_intercept': True,
 'intercept_': array([-8.28609547]),
 'intercept_scaling': 1,
 'max_iter': 100,
 'multi_class': 'ovr',
 'n_iter_': 38,
 'penalty': 'l2',
 'random_state': None,
 'solver': 'liblinear',
 'tol': 0.0001,
 'verbose': 0}
HIGH_CONFIDENCE_THRESHOLD = 0.5
GEONAME_SCORE_THRESHOLD = 0.2
contextual_classifier = {'C': 1.0,
 'class_weight': None,
 'classes_': array([False,  True], dtype=bool),
 'coef_': array([[ 0.26234083,  0.00890019, -0.06316094,  0.14148313,  0.23108809,
         0.31977929, -0.44447281, -0.00178453, -0.75289971, -0.78130899,
         0.10537068,  0.65700534,  0.46194877,  0.64820412, -0.01977827,
         1.46334977]]),
 'dual': False,
 'fit_intercept': True,
 'intercept_': array([-7.33037445]),
 'intercept_scaling': 1,
 'max_iter': 100,
 'multi_class': 'ovr',
 'n_iter_': 34,
 'penalty': 'l2',
 'random_state': None,
 'solver': 'liblinear',
 'tol': 0.0001,
 'verbose': 0}
# Logistic regression code from scipy
def predict_proba(X, classifier):
    """Probability estimation for OvR logistic regression.
    Positive class probabilities are computed as
    1. / (1. + np.exp(-classifier.decision_function(X)));
    multiclass is handled by normalizing that over all classes.
    """
    prob = np.dot(X, classifier['coef_'].T) + classifier['intercept_']
    prob = prob.ravel() if prob.shape[1] == 1 else prob
    prob *= -1
    np.exp(prob, prob)
    prob += 1
    np.reciprocal(prob, prob)
    if prob.ndim == 1:
        return np.vstack([1 - prob, prob]).T
    else:
        # OvR normalization, like LibLinear's predict_probability
        prob /= prob.sum(axis=1).reshape((prob.shape[0], -1))
        return prob
def predict_proba_base(X):
    return predict_proba(X, base_classifier)
def predict_proba_contextual(X):
    return predict_proba(X, contextual_classifier)
